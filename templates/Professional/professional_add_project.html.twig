{% extends 'layouts/arqonz_layout.html.twig' %}
{% form_theme form 'bootstrap_3_layout.html.twig' %}

{% block content %}
    <div id="main-content" class="main-content mb-5">

        <div class="page-header">
            {% if customertype == 'Contractor' %}
            <h1>Add Contractor Project</h1>
            {% endif %}
            {% if customertype == 'Architect' %}
            <h1>Add Architect Project</h1>
            {% endif %}
            {% if customertype == 'Designer' %}
            <h1>Add Designer Project</h1>
            {% endif %}
        </div>

        <p>
            {{ pimcore_wysiwyg('intro') }}
        </p>
        

        <div class="form-group">
            {{ form_row(form.ProjectGallery)}}
        </div>
       <button id="add-button">Add Images</button>
       <button id="clear-button">Clear</button>
       <div id="image-preview-container"></div>

       {{ form(form) }}

    </div>


{% if customertype == 'Contractor' %}
<script>
document.addEventListener('DOMContentLoaded', function () {
  const input = document.querySelector('.image-input');
  const container = document.getElementById('image-preview-container');
  const addButton = document.getElementById('add-button');
  const clearButton = document.getElementById('clear-button');
  const form = document.querySelector('form[name="contractor_add_project_form"]');

  let selectedFiles = []; // Array to store selected file information

  function addImagePreview(file) {
    const reader = new FileReader();

    reader.onload = function (event) {
      const img = document.createElement('img');
      img.src = event.target.result;
      img.classList.add('preview-image');

      // Create a unique identifier for the image preview
      const previewId = `preview-${selectedFiles.length}`;

      // Add a hidden input field to store the file information
      const hiddenInput = document.createElement('input');
      hiddenInput.type = 'hidden';
      hiddenInput.name = `contractor_add_project_form[ProjectGallery][]`;
      hiddenInput.value = file.name;
      hiddenInput.id = previewId;

      // Add a button to remove the image
      const removeBtn = document.createElement('button');
      removeBtn.innerText = 'x';
      removeBtn.addEventListener('click', function () {
        // Remove the image preview and hidden input
        container.removeChild(img);
        container.removeChild(removeBtn);
        container.removeChild(document.getElementById(previewId));

        // Remove the corresponding file information from the selectedFiles array
        selectedFiles = selectedFiles.filter(fileInfo => fileInfo.name !== file.name);

        if (selectedFiles.length === 0) {
          hideAddButton();
          hideClearButton();
        }
      });

      // Append image, hidden input, and remove button to the container
      container.appendChild(img);
      container.appendChild(hiddenInput);
      container.appendChild(removeBtn);

      // Store the file information in the selectedFiles array
      selectedFiles.push({
        name: file.name,
        file: file
      });

      // Show the "Add" button
      showAddButton();
      showClearButton();
    };

    reader.readAsDataURL(file);
  }

  function showAddButton() {
    addButton.style.display = 'inline-block';
  }

  function hideAddButton() {
    addButton.style.display = 'none';
  }

  function showClearButton() {
    clearButton.style.display = 'inline-block';
  }

  function hideClearButton() {
    clearButton.style.display = 'none';
  }

  input.addEventListener('change', function (e) {
    for (const file of e.target.files) {
      addImagePreview(file);
    }
  });

  addButton.addEventListener('click', function () {
    input.click(); // Trigger the file input click event
  });

  clearButton.addEventListener('click', function () {
    container.innerHTML = ''; // Clear all previews
    selectedFiles = []; // Clear the selectedFiles array
    input.value = ''; // Clear the corresponding file input
    hideAddButton();
    hideClearButton();
  });

  // Form submission
  form.addEventListener('submit', function (event) {
    event.preventDefault();

    const formData = new FormData(form);

    // Append all selected files to the formData
    for (const fileInfo of selectedFiles) {
      formData.append('contractor_add_project_form[ProjectGallery][]', fileInfo.file);
    }

    // Perform AJAX submission or use the form's default action
    // Example using fetch API:
    fetch(form.action, {
      method: form.method,
      body: formData
    })
    .then(response => {
    // Check if the response was successful (status code 2xx)
    if (response.ok) {
        // Clear the form and show a success message
        container.innerHTML = '';
        selectedFiles = [];
        input.value = '';
        hideAddButton();
        hideClearButton();
        alert('Project Submitted'); // Display a confirmation message

        // Redirect to the specified link after the alert is shown
        window.location.href = '/account/index';
    } else {
        // Handle the error case if needed
        console.error('Error submitting the form');
    }
    })
    .catch(error => {
      console.error('Error submitting the form:', error);
    });
  });

  // Initial setup: hide the "Add" and "Clear" buttons
  hideAddButton();
  hideClearButton();
});
</script>
{% endif %}



{% if customertype == 'Designer' %}
<script>
document.addEventListener('DOMContentLoaded', function () {
  const input = document.querySelector('.image-input');
  const container = document.getElementById('image-preview-container');
  const addButton = document.getElementById('add-button');
  const clearButton = document.getElementById('clear-button');
  const form = document.querySelector('form[name="designer_add_project_form"]');

  let selectedFiles = []; // Array to store selected file information

  function addImagePreview(file) {
    const reader = new FileReader();

    reader.onload = function (event) {
      const img = document.createElement('img');
      img.src = event.target.result;
      img.classList.add('preview-image');

      // Create a unique identifier for the image preview
      const previewId = `preview-${selectedFiles.length}`;

      // Add a hidden input field to store the file information
      const hiddenInput = document.createElement('input');
      hiddenInput.type = 'hidden';
      hiddenInput.name = `designer_add_project_form[ProjectGallery][]`;
      hiddenInput.value = file.name;
      hiddenInput.id = previewId;

      // Add a button to remove the image
      const removeBtn = document.createElement('button');
      removeBtn.innerText = 'x';
      removeBtn.addEventListener('click', function () {
        // Remove the image preview and hidden input
        container.removeChild(img);
        container.removeChild(removeBtn);
        container.removeChild(document.getElementById(previewId));

        // Remove the corresponding file information from the selectedFiles array
        selectedFiles = selectedFiles.filter(fileInfo => fileInfo.name !== file.name);

        if (selectedFiles.length === 0) {
          hideAddButton();
          hideClearButton();
        }
      });

      // Append image, hidden input, and remove button to the container
      container.appendChild(img);
      container.appendChild(hiddenInput);
      container.appendChild(removeBtn);

      // Store the file information in the selectedFiles array
      selectedFiles.push({
        name: file.name,
        file: file
      });

      // Show the "Add" button
      showAddButton();
      showClearButton();
    };

    reader.readAsDataURL(file);
  }

  function showAddButton() {
    addButton.style.display = 'inline-block';
  }

  function hideAddButton() {
    addButton.style.display = 'none';
  }

  function showClearButton() {
    clearButton.style.display = 'inline-block';
  }

  function hideClearButton() {
    clearButton.style.display = 'none';
  }

  input.addEventListener('change', function (e) {
    for (const file of e.target.files) {
      addImagePreview(file);
    }
  });

  addButton.addEventListener('click', function () {
    input.click(); // Trigger the file input click event
  });

  clearButton.addEventListener('click', function () {
    container.innerHTML = ''; // Clear all previews
    selectedFiles = []; // Clear the selectedFiles array
    input.value = ''; // Clear the corresponding file input
    hideAddButton();
    hideClearButton();
  });

  // Form submission
  form.addEventListener('submit', function (event) {
    event.preventDefault();

    const formData = new FormData(form);
    
    // Append all selected files to the formData
    for (const fileInfo of selectedFiles) {
      formData.append('designer_add_project_form[ProjectGallery][]', fileInfo.file);
    }

    // Perform AJAX submission or use the form's default action
    // Example using fetch API:
    fetch(form.action, {
      method: form.method,
      body: formData
    })
    .then(response => {
    // Check if the response was successful (status code 2xx)
    if (response.ok) {
        // Clear the form and show a success message
        container.innerHTML = '';
        selectedFiles = [];
        input.value = '';
        hideAddButton();
        hideClearButton();
        alert('Project Submitted'); // Display a confirmation message

        // Redirect to the specified link after the alert is shown
        window.location.href = '/en/account/index';
    } else {
        // Handle the error case if needed
        console.error('Error submitting the form');
    }
    })
    .catch(error => {
      console.error('Error submitting the form:', error);
    });
  });

  // Initial setup: hide the "Add" and "Clear" buttons
  hideAddButton();
  hideClearButton();
});
</script>

<script>
//ADD required Field
document.addEventListener('DOMContentLoaded', function () {
    var form = document.querySelector('form[name]');
    var requiredFields = form.querySelectorAll('[required]');

    for (var i = 0; i < requiredFields.length; i++) {
      var field = requiredFields[i];
      var label = form.querySelector('label[for="' + field.id + '"]');

      if (label) {
        label.innerHTML += ' <span class="required" style="color:red;">*</span>';
      }
    }
  });
</script>
{% endif %}

{% if customertype == 'Architect' %}
<script>
document.addEventListener('DOMContentLoaded', function () {
  const input = document.querySelector('.image-input');
  const container = document.getElementById('image-preview-container');
  const addButton = document.getElementById('add-button');
  const clearButton = document.getElementById('clear-button');
  const form = document.querySelector('form[name="architect_add_project_form"]');

  let selectedFiles = []; // Array to store selected file information

  function addImagePreview(file) {
    const reader = new FileReader();

    reader.onload = function (event) {
      const img = document.createElement('img');
      img.src = event.target.result;
      img.classList.add('preview-image');

      // Create a unique identifier for the image preview
      const previewId = `preview-${selectedFiles.length}`;

      // Add a hidden input field to store the file information
      const hiddenInput = document.createElement('input');
      hiddenInput.type = 'hidden';
      hiddenInput.name = `architect[ProjectGallery][]`;
      hiddenInput.value = file.name;
      hiddenInput.id = previewId;

      // Add a button to remove the image
      const removeBtn = document.createElement('button');
      removeBtn.innerText = 'x';
      removeBtn.addEventListener('click', function () {
        // Remove the image preview and hidden input
        container.removeChild(img);
        container.removeChild(removeBtn);
        container.removeChild(document.getElementById(previewId));

        // Remove the corresponding file information from the selectedFiles array
        selectedFiles = selectedFiles.filter(fileInfo => fileInfo.name !== file.name);

        if (selectedFiles.length === 0) {
          hideAddButton();
          hideClearButton();
        }
      });

      // Append image, hidden input, and remove button to the container
      container.appendChild(img);
      container.appendChild(hiddenInput);
      container.appendChild(removeBtn);

      // Store the file information in the selectedFiles array
      selectedFiles.push({
        name: file.name,
        file: file
      });

      // Show the "Add" button
      showAddButton();
      showClearButton();
    };

    reader.readAsDataURL(file);
  }

  function showAddButton() {
    addButton.style.display = 'inline-block';
  }

  function hideAddButton() {
    addButton.style.display = 'none';
  }

  function showClearButton() {
    clearButton.style.display = 'inline-block';
  }

  function hideClearButton() {
    clearButton.style.display = 'none';
  }

  input.addEventListener('change', function (e) {
    for (const file of e.target.files) {
      addImagePreview(file);
    }
  });

  addButton.addEventListener('click', function () {
    input.click(); // Trigger the file input click event
  });

  clearButton.addEventListener('click', function () {
    container.innerHTML = ''; // Clear all previews
    selectedFiles = []; // Clear the selectedFiles array
    input.value = ''; // Clear the corresponding file input
    hideAddButton();
    hideClearButton();
  });

  // Form submission
  form.addEventListener('submit', function (event) {
    event.preventDefault();

    const formData = new FormData(form);

    // Append all selected files to the formData
    for (const fileInfo of selectedFiles) {
      formData.append('architect_add_project_form[ProjectGallery][]', fileInfo.file);
    }

    // Perform AJAX submission or use the form's default action
    // Example using fetch API:
    fetch(form.action, {
      method: form.method,
      body: formData
    })
    .then(response => {
    // Check if the response was successful (status code 2xx)
    if (response.ok) {
        // Clear the form and show a success message
        container.innerHTML = '';
        selectedFiles = [];
        input.value = '';
        hideAddButton();
        hideClearButton();
        alert('Project Submitted'); // Display a confirmation message

        // Redirect to the specified link after the alert is shown
        window.location.href = '/en/account/index';
    } else {
        // Handle the error case if needed
        console.error('Error submitting the form');
    }
    })
    .catch(error => {
      console.error('Error submitting the form:', error);
    });
  });

  // Initial setup: hide the "Add" and "Clear" buttons
  hideAddButton();
  hideClearButton();
});
</script>

<script>
//ADD required Field
document.addEventListener('DOMContentLoaded', function () {
    var form = document.querySelector('form[name]');
    var requiredFields = form.querySelectorAll('[required]');

    for (var i = 0; i < requiredFields.length; i++) {
      var field = requiredFields[i];
      var label = form.querySelector('label[for="' + field.id + '"]');

      if (label) {
        label.innerHTML += ' <span class="required" style="color:red;">*</span>';
      }
    }
  });
</script>
{% endif %}

{% endblock %}